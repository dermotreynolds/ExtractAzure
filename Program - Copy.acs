using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Azure.Management.Compute.Fluent;
using Microsoft.Azure.Management.Compute.Fluent.Models;
using Microsoft.Azure.Management.Fluent;
using Microsoft.Azure.Management.ResourceManager.Fluent;
using Microsoft.Azure.Management.ResourceManager.Fluent.Core;
using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Blob;
using Microsoft.Azure.Management.Sql.Fluent;
using Microsoft.Azure.Management.Sql.Fluent.SqlServerKeyOperations.SqlServerKeyActionsDefinition;
using Microsoft.Azure.Management.Sql.Fluent.Models;
using Microsoft.Azure.Management.Sql.Fluent.SqlVirtualNetworkRuleOperations.SqlVirtualNetworkRuleActionsDefinition;
using Microsoft.Azure.Management.Sql.Fluent.SqlChildrenOperations.SqlChildrenActionsDefinition;


using Microsoft.Azure.Management.ResourceManager.Fluent.Core.ResourceActions;

using Microsoft.Azure.Management.Sql.Fluent.SqlDatabaseOperations.SqlDatabaseActionsDefinition;
using Microsoft.Azure.Management.Sql.Fluent.SqlElasticPoolOperations.SqlElasticPoolActionsDefinition;
using Microsoft.Azure.Management.Sql.Fluent.SqlEncryptionProtectorOperations.SqlEncryptionProtectorActionsDefinition;
using Microsoft.Azure.Management.Sql.Fluent.SqlFailoverGroupOperations.SqlFailoverGroupActionsDefinition;
using Microsoft.Azure.Management.Sql.Fluent.SqlFirewallRuleOperations.SqlFirewallRuleActionsDefinition;
using Microsoft.Azure.Management.Sql.Fluent.SqlServer.Update;
using Microsoft.Azure.Management.Sql.Fluent.SqlServerDnsAliasOperations.SqlServerDnsAliasActionsDefinition;
using Microsoft.Azure.Management.Sql.Fluent.SqlSyncGroupOperations.SqlSyncGroupActionsDefinition;
using System.Threading;
using AutoMapper;
using System.Dynamic;


//using Json.Net;
using Newtonsoft.Json;
using MongoDB.Driver;
using System.Runtime.Serialization;
using System.Reflection;
using System.IO;


//[Environment]::SetEnvironmentVariable("AZURE_AUTH_LOCATION", "C:\Users\Dermot\source\repos\ExrtractAzure\azureauth.properties", "User")

namespace ExrtractAzure
{
    public class haIResourceGroup
    {
        //
        // Returns:
        //     the name of the resource group
        public string Name { get; set; }
        //
        // Returns:
        //     the provisioning state of the resource group
        public string ProvisioningState { get; set; }
    }

    public class haISqlDatabase
    {
        //
        // Summary:
        //     Gets the status of the Azure SQL Database.
        public string Status { get; set; }
        //
        // Summary:
        //     Gets the elasticPoolName value.
        public string ElasticPoolName { get; set; }
        //
        // Summary:
        //     Gets the name of the region the resource is in.
        public string RegionName { get; set; }
        //
        // Summary:
        //     Gets the edition of the Azure SQL Database.
        public DatabaseEdition Edition { get; set; }
        //
        // Summary:
        //     Gets the SQL Sync Group entry point for the current database.
        public ISqlSyncGroupActionsDefinition SyncGroups { get; set; }
        //
        // Summary:
        //     Gets the current Service Level Objective Id of the Azure SQL Database, this is
        //     the Id of the Service Level Objective that is currently active.
        public Guid? CurrentServiceObjectiveId { get; set; }
        //
        // Summary:
        //     Gets the max size of the Azure SQL Database expressed in bytes.
        public long MaxSizeBytes { get; set; }
        //
        // Summary:
        //     Gets the defaultSecondaryLocation value.
        public string DefaultSecondaryLocation { get; set; }
        //
        // Summary:
        //     Gets the configured Service Level Objective Id of the Azure SQL Database, this
        //     is the Service Level Objective that is being applied to the Azure SQL Database.
        public Guid? RequestedServiceObjectiveId { get; set; }
        //
        // Summary:
        //     Gets the tags for the current SQL Database
        public IReadOnlyDictionary<string, string> Tags { get; set; }
        //
        // Summary:
        //     Gets the collation of the Azure SQL Database.
        public string Collation { get; set; }
        //
        // Summary:
        //     Gets the recovery period start date of the Azure SQL Database. This records the
        //     start date and time when recovery is available for this Azure SQL Database.
        public DateTime? EarliestRestoreDate { get; set; }
        //
        // Summary:
        //     Gets the name of the configured Service Level Objective of the Azure SQL Database,
        //     this is the Service Level Objective that is being applied to the Azure SQL Database.
        public ServiceObjectiveName RequestedServiceObjectiveName { get; set; }
        //
        // Summary:
        //     Gets name of the SQL Server to which this database belongs.
        public string SqlServerName { get; set; }
        //
        // Summary:
        //     Gets the creation date of the Azure SQL Database.
        public DateTime? CreationDate { get; set; }
        //
        // Summary:
        //     Gets the parent SQL server ID.
        public string ParentId { get; set; }
        //
        // Summary:
        //     Gets the Service Level Objective of the Azure SQL Database.
        public ServiceObjectiveName ServiceLevelObjective { get; set; }
        //
        // Summary:
        //     Gets the region the resource is in.
        public Region Region { get; set; }
        //
        // Summary:
        //     Gets true if this Database is SqlWarehouse.
        public bool IsDataWarehouse { get; set; }
        //
        // Summary:
        //     Gets the Id of the Azure SQL Database.
        public string DatabaseId { get; set; }
    }

    public class haISqlServer
    {
        //
        // Summary:
        //     Gets the System Assigned (Local) Managed Service Identity specific Active Directory
        //     tenant ID assigned to the SQL server.
        public string SystemAssignedManagedServiceIdentityTenantId { get; set; }
        //
        // Summary:
        //     Gets the SQL Server version.
        public string Version { get; set; }
        //
        // Summary:
        //     Gets returns entry point to manage SQL Server Keys for this server.
        public ISqlServerKeyActionsDefinition ServerKeys { get; set; }
        //
        // Summary:
        //     Gets the System Assigned (Local) Managed Service Identity specific Active Directory
        //     service principal ID assigned to the SQL server.
        public string SystemAssignedManagedServiceIdentityPrincipalId { get; set; }
        //
        // Summary:
        //     Gets the type of Managed Service Identity used for the SQL server.
        public IdentityType ManagedServiceIdentityType { get; set; }
        //
        // Summary:
        //     Gets returns entry point to manage the SQL Elastic Pools for this server.
        public ISqlElasticPoolActionsDefinition ElasticPools { get; set; }
        //
        // Summary:
        //     Gets the SQL Server "kind".
        public string Kind { get; set; }
        //
        // Summary:
        //     Gets fully qualified name of the SQL Server.
        public string FullyQualifiedDomainName { get; set; }
        //
        // Summary:
        //     Gets returns entry point to manage SQL Server DNS aliases for this server.
        public ISqlServerDnsAliasActionsDefinition DnsAliases { get; set; }
        //
        // Summary:
        //     Gets entry point to manage Databases for this SQL server.
        public ISqlDatabaseActionsDefinition Databases { get; set; }
      
        //public ISqlDatabases Databases { get; set; }
        //
        // Summary:
        //     Gets returns entry point to manage SQL Failover Group for this server.
        public ISqlFailoverGroupActionsDefinition FailoverGroups { get; set; }
        //
        // Summary:
        //     Gets returns entry point to manage SQL Encryption Protector for this server.
        public ISqlEncryptionProtectorActionsDefinition EncryptionProtectors { get; set; }
        //
        // Summary:
        //     Gets true if Managed Service Identity is enabled for the SQL server.
        public bool IsManagedServiceIdentityEnabled { get; set; }
        //
        // Summary:
        //     Gets returns entry point to manage SQL Virtual Network Rule for this server.
        public ISqlVirtualNetworkRuleActionsDefinition VirtualNetworkRules { get; set; }
        //
        // Summary:
        //     Gets returns entry point to manage SQL Firewall rules for this server.
        public ISqlFirewallRuleActionsDefinition FirewallRules { get; set; }
        //
        // Summary:
        //     Gets the administrator login user name for the SQL Server.
        public string AdministratorLogin { get; set; }
        //
        // Summary:
        //     Gets the state of the server.
        public string State { get; set; }

        public string Name { get; set; }

        public string ResourceGroupName { get; set; }
    }

    class CustomSerializer : IFormatter
    {

        private System.Type _type;

        public CustomSerializer(System.Type type)
        {
            _type = type;
        }
        public void Serialize(Object graph)
        {
            //Get the list of properties
            //Write the type name
            //Write the property names and values
            
            //StreamWriter streamWriter = new StreamWriter(serializeStream);

            
            switch (_type.Name)
            {
                case "ISqlDatabaseActionsDefinition":
                    Console.WriteLine("Switch ISqlDatabaseActionsDefinition");
                    //Convert.ChangeType(graph, _type);
                    ISqlDatabaseActionsDefinition isqldbs = (ISqlDatabaseActionsDefinition)graph;

                    foreach (var isqldb in isqldbs.List())
                    {
                        //Console.WriteLine("Type:"+isqldb.);
                        //_type = typeof(ISqlDatabase);
                        List<PropertyInfo> properties = _type.GetProperties().ToList();

                        foreach (PropertyInfo propertyInfo in properties)
                        {
                            Console.WriteLine(String.Format("\t\t{0}:{1}", propertyInfo.Name, propertyInfo.GetValue(isqldb)));
                        }
                            

                        //Console.WriteLine(JsonConvert.SerializeObject(isqldb, Formatting.Indented));
                    }
                    break;
                default:
                    Console.WriteLine("Switch default!");
                    Console.WriteLine("default");
                    break;

            }

            //if (_type.Name == "ISqlDatabaseActionsDefinition")
            //{


            //}
            //foreach (PropertyInfo propertyInfo in properties)
            //{
            //    //string sqldbjson = JsonConvert.SerializeObject(propertyInfo.GetValue(graph), Formatting.Indented);



            //    Console.WriteLine(String.Format("{0}:{1}", propertyInfo.Name, propertyInfo.GetValue(graph)));

            //}
            //streamWriter.Flush();
        }

        ISurrogateSelector IFormatter.SurrogateSelector { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }
        SerializationBinder IFormatter.Binder { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }
        StreamingContext IFormatter.Context { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }

        object IFormatter.Deserialize(Stream serializationStream)
        {
            throw new NotImplementedException();
        }

        void IFormatter.Serialize(Stream serializationStream, object graph)
        {
            throw new NotImplementedException();
        }
    }

    class DataSerializer 
    {
        public void CustomSerialize(System.Type dataType, object data )
        {
            CustomSerializer customSerializer = new CustomSerializer(dataType);
            //if (File.Exists(filePath)) File.Delete(filePath);
            //FileStream fileStream = File.Create(filePath);
            customSerializer.Serialize(data);
            //fileStream.Close();
        }
    }
    class Program
    {


        static void Main(string[] args)
        {
            var groupName = "sampleResourceGroup";
            var vmName = "VMWithCSharp";
            var location = Region.EuropeWest;
            var subscription = "624d289c-1078-451c-a86e-bd145fe77a58";
            var clientId = "624d289c-1078-451c-a86e-bd145fe77a58";
            var clientSecret = "1rKHn_2-O2jv6x66k~O2-_GlP4RKKNTmc0";
            var tenantId = "184e4ab4-a9bf-4b68-a72f-eb4e03b54ae1";

            //haSqlServer hsql = new haSqlServer();

            //hsql.SystemAssignedManagedServiceIdentityTenantId

            var credentials = SdkContext.AzureCredentialsFactory
              .FromServicePrincipal(clientId, clientSecret, tenantId, AzureEnvironment.AzureGlobalCloud);

            var azure = Azure
                .Configure()
                .WithLogLevel(HttpLoggingDelegatingHandler.Level.Basic)
                .Authenticate(credentials)
                .WithDefaultSubscription();

            

            var resourceGroups = azure.ResourceGroups.List();
            var sqlServers = azure.SqlServers.List();


            var dataSerializer = new DataSerializer();

            foreach(var sqlServer in sqlServers)
            {

                //dataSerializer.CustomSerialize(typeof(ISqlServer), sqlServer);

                //foreach (var sqlDatabase in sqlServer.Databases.List())
                //{
                //dataSerializer.CustomSerialize(typeof(ISqlServer), sqlServer);
                //dataSerializer.CustomSerialize(typeof(ISqlServerKey), sqlServer.ServerKeys);
                dataSerializer.CustomSerialize(typeof(ISqlDatabase), sqlServer.Databases);







                //Console.WriteLine(bob.GetType().ToString());
                //Console.WriteLine(typeof(ISqlDatabaseActionsDefinition));
                //Console.WriteLine(bob.GetType());
                //}


            }


            
            //var resourceConfig = new MapperConfiguration(cfg => {
            //    cfg.CreateMap<IResourceGroup, haIResourceGroup>();
            //});

            //var resourceGroups = azure.ResourceGroups.List();

            //IMapper iResourceMapper = resourceConfig.CreateMapper();


            //foreach (var resourceGroup in resourceGroups)
            //{

            //    var resourceDestination = iResourceMapper.Map<IResourceGroup, haIResourceGroup>(resourceGroup);
                
            //    Console.WriteLine(resourceDestination.Name);


            //}


            //#################

            //var sqlConfig = new MapperConfiguration(cfg => {
            //    cfg.CreateMap<ISqlServer, haISqlServer>();
            //});

            //var sqlServers = azure.SqlServers.List();


            //IMapper iSqlMapper = sqlConfig.CreateMapper();

            //IMongoClient client = new MongoClient();
            //IMongoDatabase db = client.GetDatabase("haptical");

            //foreach (var sqlServer in sqlServers)
            //{

                
            //    var sqlDestination = iSqlMapper.Map<ISqlServer, haISqlServer>(sqlServer);

            //    var sqldbjson = JsonConvert.SerializeObject(sqlServer, Formatting.Indented,
            //        new JsonSerializerSettings
            //        {
            //            ReferenceLoopHandling = ReferenceLoopHandling.Serialize
            //        });


            //    Console.WriteLine(sqldbjson);

            //    //var objectList1Collection = db.GetCollection<haISqlServer>("haISqlServer");

            //    //objectList1Collection.InsertOne(sqlDestination);
            //    //Console.WriteLine("SqlName:" + sqlDestination.Databases.List()[0].Name);
            //    //string sqldbjson = JsonConvert.SerializeObject(sqlDestination.Databases.List(), Formatting.Indented);
            //    //Console.WriteLine(sqldbjson);

            //    //Console.WriteLine("SqlName:"+sqlDestination.Name);


            //    //foreach(var sqlDb in sqlDestination.Databases.List())
            //    //{
            //    //    Console.WriteLine("dbName:"+sqlDb.Name);
            //    //    string dbJon = JsonConvert.SerializeObject(sqlDb, Formatting.Indented);
            //    //    Console.WriteLine(dbJon);
            //    //}

            //    //foreach(var DnsAlias in sqlDestination.DnsAliases.List())
            //    //{
            //    //    Console.WriteLine("DNSALIAS");
            //    //    string dnsJon = JsonConvert.SerializeObject(DnsAlias, Formatting.Indented);
            //    //    Console.WriteLine(dnsJon);
            //    //}


            //    //dynamic sampleObject = new ExpandoObject();

            //    //string json = JsonConvert.SerializeObject(sqlDestination, Formatting.Indented);
            //    //Console.WriteLine(json);



            //}




            //haSqlServer myhaSqlServer = new haSqlServer();

            //myhaSqlServer.AdministratorLogin





            //foreach (var sqlServer in azure.SqlServers.List())
            //{

            //    haSqlServer hsql = new haSqlServer();

            //    hsql.AdministratorLogin = sqlServer.AdministratorLogin;


            //    //
            //    // Summary:
            //    //     Gets the System Assigned (Local) Managed Service Identity specific Active Directory
            //    //     tenant ID assigned to the SQL server.
            //    string hSystemAssignedManagedServiceIdentityTenantId = sqlServer.SystemAssignedManagedServiceIdentityTenantId;

            //    //
            //    // Summary:
            //    //     Gets the SQL Server version.
            //    string hVersion = sqlServer.Version;
            //    //
            //    // Summary:
            //    //     Gets returns entry point to manage SQL Server Keys for this server.
            //    ISqlServerKeyActionsDefinition hServerKeys = sqlServer.ServerKeys;
            //    //
            //    // Summary:
            //    //     Gets the System Assigned (Local) Managed Service Identity specific Active Directory
            //    //     service principal ID assigned to the SQL server.
            //    string hSystemAssignedManagedServiceIdentityPrincipalId = sqlServer.SystemAssignedManagedServiceIdentityPrincipalId;
            //    //
            //    // Summary:
            //    //     Gets the type of Managed Service Identity used for the SQL server.
            //    IdentityType hManagedServiceIdentityType = sqlServer.ManagedServiceIdentityType;
            //    //
            //    // Summary:
            //    //     Gets returns entry point to manage the SQL Elastic Pools for this server.
            //    ISqlElasticPoolActionsDefinition hElasticPools = sqlServer.ElasticPools;
            //    //
            //    // Summary:
            //    //     Gets the SQL Server "kind".
            //    string hKind = sqlServer.Kind;
            //    //
            //    // Summary:
            //    //     Gets fully qualified name of the SQL Server.
            //    string hFullyQualifiedDomainName = sqlServer.FullyQualifiedDomainName;
            //    //
            //    // Summary:
            //    //     Gets returns entry point to manage SQL Server DNS aliases for this server.
            //    ISqlServerDnsAliasActionsDefinition hDnsAliases = sqlServer.DnsAliases;
            //    //
            //    // Summary:
            //    //     Gets entry point to manage Databases for this SQL server.
            //    ISqlDatabaseActionsDefinition hDatabases = sqlServer.Databases;
            //    //
            //    // Summary:
            //    //     Gets returns entry point to manage SQL Failover Group for this server.
            //    ISqlFailoverGroupActionsDefinition hFailoverGroups = sqlServer.FailoverGroups;
            //    //
            //    // Summary:
            //    //     Gets returns entry point to manage SQL Encryption Protector for this server.
            //    ISqlEncryptionProtectorActionsDefinition hEncryptionProtectors = sqlServer.EncryptionProtectors;
            //    //
            //    // Summary:
            //    //     Gets true if Managed Service Identity is enabled for the SQL server.
            //    bool hIsManagedServiceIdentityEnabled = sqlServer.IsManagedServiceIdentityEnabled;
            //    //
            //    // Summary:
            //    //     Gets returns entry point to manage SQL Virtual Network Rule for this server.
            //    ISqlVirtualNetworkRuleActionsDefinition hVirtualNetworkRules = sqlServer.VirtualNetworkRules;
            //    //
            //    // Summary:
            //    //     Gets returns entry point to manage SQL Firewall rules for this server.
            //    ISqlFirewallRuleActionsDefinition hFirewallRules = sqlServer.FirewallRules;
            //    //
            //    // Summary:
            //    //     Gets the administrator login user name for the SQL Server.
            //    string hAdministratorLogin = sqlServer.AdministratorLogin;
            //    //
            //    // Summary:
            //    //     Gets the state of the server.
            //    string hState = sqlServer.State;

            //    Console.WriteLine("########################");
            //    Console.WriteLine("");

            //    Console.WriteLine("Name:\t\t\t" + sqlServer.Name);
            //    Console.WriteLine("ResourceGroup:\t\t\t" + sqlServer.ResourceGroupName);
            //    Console.WriteLine("Region:\t\t\t" + sqlServer.Region);
            //    Console.WriteLine("RegionName:\t\t\t" + sqlServer.RegionName);
            //    Console.WriteLine("Type:\t\t\t" + sqlServer.Type);
            //    Console.WriteLine("######");
            //    Console.WriteLine("");

            //    Console.WriteLine("hSystemAssignedManagedServiceIdentityTenantId:\t\t\t" + hSystemAssignedManagedServiceIdentityTenantId);
            //    Console.WriteLine("hVersion:\t\t\t" + hVersion);

            //    foreach (var hServerKey in hServerKeys.List())
            //    {

            //        var jsonstring = JsonConvert.SerializeObject(hServerKey, Formatting.None, new JsonSerializerSettings()
            //        {
            //            TypeNameHandling = TypeNameHandling.All,
            //            TypeNameAssemblyFormat = System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple
            //        });

            //        //
            //        // Summary:
            //        //     Gets the server key type.
            //        ServerKeyType hServerKeyType = hServerKey.ServerKeyType;
            //        //
            //        // Summary:
            //        //     Gets name of the SQL Server to which this DNS alias belongs.
            //        string hSqlServerName = hServerKey.SqlServerName;
            //        //
            //        // Summary:
            //        //     Gets the kind of encryption protector; this is metadata used for the Azure Portal
            //        //     experience.
            //        string hskKind = hServerKey.Kind;
            //        //
            //        // Summary:
            //        //     Gets the thumbprint of the server key.
            //        string hThumbprint = hServerKey.Thumbprint;
            //        //
            //        // Summary:
            //        //     Gets the resource location.
            //        Region hRegion = hServerKey.Region;
            //        //
            //        // Summary:
            //        //     Gets the server key creation date.
            //        DateTime? hCreationDate = hServerKey.CreationDate;
            //        //
            //        // Summary:
            //        //     Gets the URI of the server key.
            //        string hUri = hServerKey.Uri;
            //        //
            //        // Summary:
            //        //     Gets the parent SQL server ID.
            //        string hParentId = hServerKey.ParentId;



            //    }



            //    Console.WriteLine("hSystemAssignedManagedServiceIdentityPrincipalId:\t" + hSystemAssignedManagedServiceIdentityPrincipalId);
            //    Console.WriteLine("hManagedServiceIdentityType:" + hManagedServiceIdentityType);
            //    Console.WriteLine("hElasticPools:" + hElasticPools);
            //    Console.WriteLine("hKind:" + hKind);
            //    Console.WriteLine("hFullyQualifiedDomainName:" + hFullyQualifiedDomainName);

            //    foreach(var hDnsAliase in hDnsAliases.List())
            //    {

            //        Console.WriteLine("hDnsAliases:" + hDnsAliase.Name);
            //    }

            //    Console.WriteLine("hDatabases:" + hDatabases);
            //    var rGJsonString = JsonConvert.SerializeObject(hDatabases.List(), Formatting.Indented);
            //    foreach(var hDatabase in hDatabases.List())
            //    {

            //        var jsonstring=JsonConvert.SerializeObject(hDatabase, Formatting.Indented, new JsonSerializerSettings()
            //        {
            //            TypeNameHandling = TypeNameHandling.All,
            //            TypeNameAssemblyFormat = System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple
            //        });

            //        Console.WriteLine("OUT:" + jsonstring);

            //        //// Summary:
            //        ////     Gets the SQL Sync Group entry point for the current database.
            //        //ISqlSyncGroupActionsDefinition hSyncGroups = hDatabase.SyncGroups;
            //        ////
            //        //// Summary:
            //        ////     Gets the current Service Level Objective Id of the Azure SQL Database, this is
            //        ////     the Id of the Service Level Objective that is currently active.
            //        //Guid? hCurrentServiceObjectiveId = hDatabase.CurrentServiceObjectiveId;
            //        ////
            //        //// Summary:
            //        ////     Gets the max size of the Azure SQL Database expressed in bytes.
            //        //long MaxSizeBytes { get; }
            //        ////
            //        //// Summary:
            //        ////     Gets the defaultSecondaryLocation value.
            //        //string DefaultSecondaryLocation { get; }
            //        ////
            //        //// Summary:
            //        ////     Gets the configured Service Level Objective Id of the Azure SQL Database, this
            //        ////     is the Service Level Objective that is being applied to the Azure SQL Database.
            //        //Guid? RequestedServiceObjectiveId { get; }
            //        ////
            //        //// Summary:
            //        ////     Gets the tags for the current SQL Database
            //        //IReadOnlyDictionary<string, string> Tags { get; }
            //        ////
            //        //// Summary:
            //        ////     Gets the collation of the Azure SQL Database.
            //        //string Collation { get; }
            //        ////
            //        //// Summary:
            //        ////     Gets the recovery period start date of the Azure SQL Database. This records the
            //        ////     start date and time when recovery is available for this Azure SQL Database.
            //        //DateTime? EarliestRestoreDate { get; }
            //        ////
            //        //// Summary:
            //        ////     Gets the name of the configured Service Level Objective of the Azure SQL Database,
            //        ////     this is the Service Level Objective that is being applied to the Azure SQL Database.
            //        //ServiceObjectiveName RequestedServiceObjectiveName { get; }
            //        ////
            //        //// Summary:
            //        ////     Gets name of the SQL Server to which this database belongs.
            //        //string SqlServerName { get; }
            //        ////
            //        //// Summary:
            //        ////     Gets the creation date of the Azure SQL Database.
            //        //DateTime? CreationDate { get; }
            //        ////
            //        //// Summary:
            //        ////     Gets the parent SQL server ID.
            //        //string ParentId { get; }
            //        ////
            //        //// Summary:
            //        ////     Gets the Service Level Objective of the Azure SQL Database.
            //        //ServiceObjectiveName ServiceLevelObjective { get; }
            //        ////
            //        //// Summary:
            //        ////     Gets the region the resource is in.
            //        //Region Region { get; }
            //        ////
            //        //// Summary:
            //        ////     Gets true if this Database is SqlWarehouse.
            //        //bool IsDataWarehouse { get; }
            //        ////
            //        //// Summary:
            //        ////     Gets the Id of the Azure SQL Database.
            //        //string DatabaseId { get; }

            //    }
            //    //Console.WriteLine(rGJsonString);

            //    //Console.WriteLine("hFailoverGroups:" + hFailoverGroups);

            //    //rGJsonString = JsonConvert.SerializeObject(hFailoverGroups, Formatting.Indented);
            //    //Console.WriteLine(rGJsonString);

            //    //Console.WriteLine("hEncryptionProtectors:" + hEncryptionProtectors); 
            //    //Console.WriteLine("hIsManagedServiceIdentityEnabled:" + hIsManagedServiceIdentityEnabled);
            //    //Console.WriteLine("hVirtualNetworkRules:" + hVirtualNetworkRules);
            //    //Console.WriteLine("hFirewallRules:" + hFirewallRules);
            //    //Console.WriteLine("hAdministratorLogin:" + hAdministratorLogin);
            //    //Console.WriteLine("hState:" + hState);



            //}


            //    //    foreach(var sqlDatabase in sqlServer.Databases.List())
            //    //    {
            //    //        Console.WriteLine(sqlDatabase.Name);
            //    //        sqlDatabase.
            //    //    }

            //    //}

            //    //foreach (var sqlServer in sqlServers)
            //    //{

            //    //    var sqljsonString = JsonConvert.SerializeObject(sqlServer);
            //    //    Console.WriteLine(sqlServer);

            //    //}

            //    //IMongoClient client = new MongoClient();
            //    //IMongoDatabase db = client.GetDatabase("haptical");

            //    //var objectList1Collection = db.GetCollection<IResourceGroup>("resourceGroups");
            //    //objectList1Collection.InsertMany(resourceGroups);

            //    //var objectList1Collection = db.GetCollection<ISqlServer>("sqlServers");
            //    //objectList1Collection.InsertMany(sqlServers);



            //    //  var resourceGroup = azure.ResourceGroups.Define(groupName)
            //    //.WithRegion(location)
            //    //.Create();
        }


    }
}
